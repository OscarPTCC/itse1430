using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace MovieLibrary
{
    //Abstract class required if any member is abstract
    // 1. Cannot be instantiated
    // 2. Must be derived
    // 3. Must implement all abstract members
    public abstract class MovieDatabase : IMovieDatabase
    {
        //Not on interface
        //public void foo () { }

        public Movie Add ( Movie movie )
        {
            #region Exceptions
            //Exception type is the base type of all exceptions
            //Arguments should always fall with argument exceptions
            //Exceptions
            //      ArgumentException -> generic argument exception
            //          ArgumentNullException -> argument is null and it shouldn't be
            //          ArgumentOutOfRangeException -> argument is outside excpected range (generally numeric)
            //      ValidationException -> IValidatableObject fails
            //      InvalidOperationException -> The operation is not currently valid but may be in the future
            //      SystemException -> Only generated by runtime
            //          NullReferenceException -> null is on left side of member access (null.???)
            //          StackOverflowException -> Stack overflowed
            //          OutOfMemoryExcpetion -> Out of memory

            //Throw an exception using throw expression
            //  throw-expression ::= throw E
            //      E must be an exception
            #endregion

            //Movie is not null
            if (movie == null)
                new ArgumentNullException(nameof(movie)); //Argument is null and it shouldn't be, pretty much all reference types

            //Movie is valid
            ObjectValidator.ValidateFullObject(movie);

            //var results = new ObjectValidator().TryValidateFullObject(movie);
            //if (results.Count() > 0)
            //{
            //    foreach (var result in results)
            //    { 
            //        error = result.ErrorMessage;
            //        return null;
            //    };
            //};

            //TODO: Movie is valid
            // Movie name is unique
            //var existing = GetByName(movie.Name);
            //if (existing != null)
            //    throw new InvalidOperationException("Movie must be unique");

            //throw expression ::= E ?? throw E
            var existing = GetByName(movie.Name);
            if (existing != null)
                throw new InvalidOperationException("Movie must be unique");
            //{
            //    error = "Movie must be unique";
            //    return null;
            //};

            //TODO: Generalize errors
            try
            {
                return AddCore(movie);
            } catch (Exception e)
            {
                //Throwing a new exception
                throw new InvalidOperationException("Add Failed", e);
            }
        }

        /// <summary>Adds a movie to the database.</summary>
        /// <param name="movie">The movie to add.</param>
        /// <returns>The added movie.</returns>
        protected abstract Movie AddCore ( Movie movie );

        protected abstract void DeleteCore ( int id );

        protected abstract IEnumerable<Movie> GetAllCore ();

        protected abstract Movie GetByIdCore ( int id );

        protected abstract void UpdateCore ( int id, Movie movie );

        protected virtual Movie GetByName ( string name )
        {
            foreach (var movie in GetAll())
            {
                if (String.Compare(movie.Name, name, true) == 0)
                    return movie;
            };

            return null;
        }

        public void Delete ( int id )
        {
            //Validate Id > 0
            if (id <= 0)
                throw new ArgumentOutOfRangeException(nameof(id), "Id must be greater than zero");

            //Generalize errors
            try
            {
                DeleteCore(id);
            } catch (Exception e)
            {
                throw new InvalidOperationException("Delete Failed", e);
            };

            #region For Array
            //for (var index = 0; index < _movies.Count; ++index)
            //{
            //Array element access - V[int]
            //if (_movies[index] != null && _movies[index].Id == id)
            //    if (_movies[index]?.Id == id) // null conditional ?. if instance != null access the member
            //    {
            //        _movies[index] = null;
            //        return;
            //    };
            //};
            #endregion
        }

        //Use IEnumerable<T> for readonly lists of items
        //public Movie[] GetAll ()
        public IEnumerable<Movie> GetAll ()
        {
            //Generalize errors
            try
            {
                return GetAllCore();
            } catch (Exception e)
            {
                throw new InvalidOperationException("GetAll Failed", e);
            };
        }

        public Movie Get ( int id )
        {
            //Validate id >= 0
            if (id <= 0)
                throw new ArgumentOutOfRangeException(nameof(id), "Id must be greater than zero");

            //Generalize errors
            try
            {
                return GetByIdCore(id);
            } catch (Exception e)
            {
                throw new InvalidOperationException("Get Failed", e);
            };
        }

        public void Update ( int id, Movie movie )
        {
            //TODO: movie is not null
            if (movie == null)
                throw new ArgumentNullException(nameof(movie));
            //TODO: id >= 0
            if (id <= 0)
                throw new ArgumentOutOfRangeException(nameof(id), "Id must be greater than zero");

            //Movie is valid
            ObjectValidator.ValidateFullObject(movie);
            //var results = new ObjectValidator().TryValidateFullObject(movie);
            //if (results.Count() > 0)
            //{
            //    foreach (var result in results)
            //    {
            //        return result.ErrorMessage;
            //    };
            //};

            // Movie name is unique
            var existing = GetByName(movie.Name);
            if (existing != null && existing.Id != id)
                throw new InvalidOperationException("Movie must be unique");

            //Generalize errors
            try
            {
                UpdateCore(id, movie);
            } catch (Exception e)
            {
                throw new InvalidOperationException("Update Failed", e);
            };
        }
    }
}
